1.前提概要
2.繼承的運作方式
3.繼承階層的設計：
A：找出具有共通屬性與行為的物件
B：設計代表共通狀態與行為的 class
C：決定 subclass 是否需要讓某項行為(也就是 method 的實作)有特定不同的運作方式
D：藉由尋找使用共通行為的 subclass 來找出更多抽象化機會
E：完成 class 的繼承階層
4.繼承樹的實用設計
5.釋放物件的威力
★繼承概念下的 IS-A 是個單向的關係!
6.繼承有甚麼好處?
A：避免重複的程式碼
B：定義出共通的協議
7.多型的運作
8.同名異式-遵守合約：overriding 的規則：
A：參數必須要一樣，而且回傳型別必須要相容
B：method 的存取權不得縮小
9.method 的過載(overload)：
A：回傳型別可以不同
B：不能只改變回傳型別
C：可以更動存取權限


